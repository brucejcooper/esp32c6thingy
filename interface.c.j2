
#include "interface_{{name}}.h"



ccpeed_err_t thingif_{{name}}_attr_read(thingif_{{name}}_attr_t *attr, CborValue *val) {
    CborValue it;
    size_t len, slen;
    CborError err;
    uint64_t key;

    if (!cbor_value_is_map(val)) {
        return CCPEED_ERROR_INVALID;
    }

    err = cbor_value_get_map_length(val, &len);
    if (err != CborNoError) {
        return CCPEED_ERROR_INVALID;
    }

    
    cbor_value_enter_container(&it, val);
    while (len--) {
        if (!cbor_value_is_integer(&it)) {
            return CCPEED_ERROR_INVALID;
        }

        err = cbor_value_get_uint64(&it, &key);
        if (err != CborNoError) {
            return CCPEED_ERROR_INVALID;
        }
        err = cbor_value_advance(&it);
        if (err != CborNoError) {
            return CCPEED_ERROR_INVALID;
        }

        switch (key) {
{% for attr in attributes %}
            case THINGIF_{{name|upper}}_ATTR_{{attr.name|upper}}:
{% if attr.type == 'ast' %}
                err = ast_parse_from_cbor(&it, &(attr->{{attr.name}}));
                if (err != CborNoError) {
                    return CCPEED_ERROR_INVALID;
                }
{% elif attr.type == 'boolean' %}
                if (!cbor_value_is_boolean(&it)) {
                    return CCPEED_ERROR_INVALID;
                }
                err = cbor_value_get_boolean(&it, &(attr->{{attr.name}}));
                if (err != CborNoError) {
                    return CCPEED_ERROR_INVALID;
                }
{% elif attr.type == 'string' %}
                if (!cbor_value_is_text_string(&it)) {
                    return CCPEED_ERROR_INVALID;
                }
                err = cbor_value_get_string_length(&it, &slen);
                if (err != CborNoError) {
                    return CCPEED_ERROR_INVALID;
                }
                attr->{{attr.name}} = malloc(slen);
                if (!attr->{{attr.name}}) {
                    return CCPEED_ERROR_NOMEM;
                }

                err = cbor_value_copy_text_string(&it, attr->{{attr.name}}, slen, NULL);
                if (err != CborNoError) {
                    return CCPEED_ERROR_INVALID;
                }
{% else %}
                if (!cbor_value_is_integer(&it)) {
                    return CCPEED_ERROR_INVALID;
                }
                err = cbor_value_get_int(&it, &(attr->{{attr.name}}));
                if (err != CborNoError) {
                    return CCPEED_ERROR_INVALID;
                }
{% endif %}
                attr->is_{{attr.name}}_present = true;
                break;
{% endfor %}
            default:
                return CCPEED_ERROR_INVALID;
        }

        // Move to the next value in the map.
        err = cbor_value_advance(&it);
        if (err != CborNoError) {
            return CCPEED_ERROR_INVALID;
        }
    }
    err = cbor_value_leave_container(&it, val);
    if (err != CborNoError) {
        return CCPEED_ERROR_INVALID;
    }
    return CCPEED_NO_ERR;
}


ccpeed_err_t thingif_{{name}}_attr_write(thingif_{{name}}_attr_t *attr, CborEncoder *enc) {
    CborError err;
    CborEncoder mapEnc;
    size_t num_items = 0;

{% for attr in attributes %}
    if (attr->is_{{attr.name}}_present) {
        num_items++;
    }
{%- endfor %}
    err = cbor_encoder_create_map(enc, &mapEnc, num_items);
    if (err != CborNoError) {
        return CCPEED_ERROR_INVALID;
    }

{% for attr in attributes %}
    if (attr->is_{{attr.name}}_present) {
{%- if attr.type == 'ast' %}
        err = ast_serialise_to_cbor(&(attr->{{attr.name}}), &mapEnc);
        if (err != CborNoError) {
            return CCPEED_ERROR_INVALID;
        }
{% elif attr.type == 'boolean' %}
        err = cbor_encode_boolean(&mapEnc, attr->{{attr.name}});
        if (err != CborNoError) {
            return CCPEED_ERROR_INVALID;
        }
{%- elif attr.type == 'string' %}
        err = cbor_encode_text_stringz(&mapEnc, attr->{{attr.name}});
        if (err != CborNoError) {
            return CCPEED_ERROR_INVALID;
        }
{%- else %}
        err = cbor_encode_int(&mapEnc, attr->{{attr.name}});
        if (err != CborNoError) {
            return CCPEED_ERROR_INVALID;
        }
{%- endif %}
    }
{% endfor %}
    err = cbor_encoder_close_container(enc, &mapEnc);
    if (err != CborNoError) {
        return CCPEED_ERROR_INVALID;
    }


    return CCPEED_NO_ERR;
}

void thingif_{{name}}_attr_free(thingif_{{name}}_attr_t *attr) {
{% for attr in attributes -%}
    attr->is_{{attr.name}}_present = false;
{%- if attr.type == 'ast' %}
    ast_free(&(attr->{{attr.name}}));
{%- elif attr.type == 'string' %}
    free(attr->{{attr.name}});
{%- endif -%}
{%- endfor %}
} 

ccpeed_err_t thingif_{{name}}_op_call(uint32_t op, CborValue *params) {
    return CCPEED_ERROR_NOT_IMPLEMENTED;
}
